@{
    ViewBag.Title = "Home Page";
}
<br />
<div class="row">
    <div class="col-md-2">
        <label class="input-lg">Query</label>
    </div>
    <div class="col-md-3 input-group">
        <input data-bind="value: searchQuery" class="form-control input-lg"/>
    </div>
</div>
<div class="row">
    <div class="col-md-2">
        <label class="input-lg">Where</label>
    </div>
    <div class="col-md-3 input-group">
        <input data-bind="value: searchWhere" class="form-control input-lg"/>
    </div>
</div>
<div class="row">
    <div class="col-md-2">
        <label class="input-lg">How many</label>
    </div>
    <div class="col-md-3 input-group">
        <input data-bind="value: searchHowMany" class="form-control input-lg"/>
    </div>
</div>
<div class="row">
    <div class="col-md-1">
        <button class="btn btn-lg btn-primary" data-bind="click: getMap">Search</button>
    </div>
</div>
<div class="row">
    <div class="col-md-2">
        <label class="input-lg">Data set name:</label>
    </div>
    <div class="col-md-3 input-group">
        <input data-bind="value: dataSetName" class="form-control input-lg"/>
    </div>
</div>
<div class="row">
    <div class="col-md-1">
        <button class="btn btn-lg btn-primary" data-bind="click: saveLocations">Save</button>
    </div>
</div>
<div class="row">
    <div class="col-md-1">
        <button class="btn btn-lg btn-primary" data-bind="click: turnLines">Edges on/off</button>
    </div>
</div>

<br />
<div class="row">
    <div id="mapDiv" style="height: 800px; position: relative;"></div>
</div>

<script type="text/javascript" src="http://ecn.dev.virtualearth.net/mapcontrol/mapcontrol.ashx?v=7.0&mkt=pl-pl"></script>

<script type="text/javascript">


    var map = null;
    var pinInfobox = null;
    var infoboxLayer = new Microsoft.Maps.EntityCollection();
    infoboxLayer.setOptions({zIndex: 3});
    var pinLayer = new Microsoft.Maps.EntityCollection();
    var linesLayer = new Microsoft.Maps.EntityCollection();
    var directionsManager = null;
    var query = "atrakcje turystyczne";
    var locations = null;
    function createWalkingRoute() {
        debugger;
        directionsManager = new Microsoft.Maps.Directions.DirectionsManager(map);
        Microsoft.Maps.Events.addHandler(directionsManager, "directionsUpdated", displayDistanceAndTime);
    }

    function displayDistanceAndTime(e) {
        debugger;
        //alert("Total Distance: " + e.routeSummary[0].distance + " miles\n" + "Total Time: " + e.routeSummary[0].time / 60 + " minutes");
        pinInfobox.setOptions({ height: 100, title: title, offset: new Microsoft.Maps.Point(0, 0), description: "Distance: " + e.routeSummary[0].distance.toFixed(2) + " km" + ", Duration: " + (e.routeSummary[0].time / 60).toFixed(2) + " min", visible: true });
        //var l1_lat = (Math.abs(locs[0].latitude) - Math.abs(locs[1].latitude))/2 + Math.min(locs[0].latitude, locs[1].latitude);
        var l1_lat = ((locs[0].latitude) + (locs[1].latitude)) / 2;
        //var l1_long = (Math.abs(locs[0].longitude) - Math.abs(locs[1].longitude))/2 + Math.min(locs[0].longitude, locs[1].longitude);
        var l1_long = (locs[0].longitude + (locs[1].longitude)) / 2;
        //var newLoc = new Microsoft.Maps.Location(Math.sqrt(Math.pow(locs[0].latitude, 2) / 2 + Math.pow(locs[1].latitude, 2) / 2), Math.sqrt(Math.pow(locs[0].longitude, 2) / 2 + Math.pow(locs[1].longitude, 2) / 2));
        var newLoc = new Microsoft.Maps.Location(l1_lat, l1_long);

        pinInfobox.setLocation(newLoc);
    }

    function displayInfobox(e) {
        debugger;
        if (e.targetType === "pushpin") {
            pinInfobox.setOptions({ height: 260,width:300,title: e.target.Title, description: '<img src="'+ e.target.PhotoUrl +  '"/><br/><br/>' + e.target.Description, visible: true, offset: new Microsoft.Maps.Point(0, 25) });
            pinInfobox.setLocation(e.target.getLocation());
        } if (e.targetType === "polyline") {
            //pinInfobox.setOptions({ title: e.target.Title, description: e.target.Description, visible: true });
            title = e.target.Title;
            //debugger;
            locs = e.target.getLocations();
            directionsManager.resetDirections();
            /*var newLoc = new Microsoft.Maps.Location(Math.sqrt(Math.pow(locs[0].latitude, 2) / 2 + Math.pow(locs[1].latitude, 2) / 2), Math.sqrt(Math.pow(locs[0].longitude, 2) / 2 + Math.pow(locs[1].longitude, 2) / 2));
            pinInfobox.setLocation(newLoc);*/

            directionsManager.setRequestOptions({ routeMode: Microsoft.Maps.Directions.RouteMode.walking });
            var first = new Microsoft.Maps.Directions.Waypoint({ location: locs[0] });
            directionsManager.addWaypoint(first);
            var second = new Microsoft.Maps.Directions.Waypoint({ location: locs[1] });
            directionsManager.addWaypoint(second);
            directionsManager.calculateDirections();
            //debugger;
        }

    }

    function blueLine(e) {
        if (e.targetType === "polyline") {
            e.target.setOptions({ strokeColor: new Microsoft.Maps.Color(255, 0, 0, 255), zIndex: 100000 });
        }
    }

    function redLine(e) {
        if (e.targetType === "polyline") {
            e.target.setOptions({ strokeColor: new Microsoft.Maps.Color(256, 255, 0, 0) });
        }
    }


   /* function geocodeCallback(geocodeResult, userData) {
        locations = geocodeResult.searchResults.map(function (elem) {
            return {
                latitude: elem.location.latitude,
                longitude: elem.location.longitude,
                name: elem.name
            }
        });
        map.setView({ center: geocodeResult.searchResults[0].location, zoom: 13 });
        geocodeResult.searchResults.forEach(function (elem, index) {
            var pin = new Microsoft.Maps.Pushpin(elem.location);
            pin.Title = elem.name;
            pin.Description = elem.address + " " + elem.city + ", Category: " + 10 + ", Grade: " + 10;
            map.entities.push(pin);
            Microsoft.Maps.Events.addHandler(pin, "click", displayInfobox);

            geocodeResult.searchResults.forEach(function (elemInner, indexInner) {
                var lineVertices = new Array(elem.location, elemInner.location);
                var line = new Microsoft.Maps.Polyline(lineVertices);
                line.Title = "Route from \"" + elem.name + "\" to \"" + elemInner.name + "\"";
                //line.Description = "Distance: " + "2,7 km" + ", Duration: " + "32 min" + ", Duration: " + "32 min";
                map.entities.push(line);
                Microsoft.Maps.Events.addHandler(line, "click", displayInfobox);
                Microsoft.Maps.Events.addHandler(line, "mouseover", blueLine);
                Microsoft.Maps.Events.addHandler(line, "mouseout", redLine);
            });

        });
    }*/

    function drawLocations(locations) {
        map.setView({ center: new Microsoft.Maps.Location(locations[0].Latitude, locations[0].Longitude), zoom: 13 });
        locations.forEach(function (elem, index) {
            var elemLocation = new Microsoft.Maps.Location(elem.Latitude, elem.Longitude);
            var pin = new Microsoft.Maps.Pushpin(elemLocation);
            pin.Title = elem.Name;
            pin.Description = elem.Address + "</br> Category: " + elem.Category + "</br> Rate: " + elem.Rate;
            pin.PhotoUrl = elem.PhotoUrl;
            pinLayer.push(pin);
            //pinLayer.setOptions({ zIndex: 2 });
            Microsoft.Maps.Events.addHandler(pin, "click", displayInfobox);

            /*locations.forEach(function (elemInner, indexInner) {
                var elemInnerLocation = new Microsoft.Maps.Location(elemInner.Latitude, elemInner.Longitude);
                var lineVertices = new Array(elemLocation, elemInnerLocation);
                var line = new Microsoft.Maps.Polyline(lineVertices);
                line.Title = "Route from \"" + elem.Name + "\" to \"" + elemInner.Name + "\"";
                line.Description = "Distance: " + "2,7 km" + ", Duration: " + "32 min";
                map.entities.push(line);
                Microsoft.Maps.Events.addHandler(line, "click", displayInfobox);
                Microsoft.Maps.Events.addHandler(line, "mouseover", blueLine);
                Microsoft.Maps.Events.addHandler(line, "mouseout", redLine);
            });*/

        });
        drawLines(locations);
        map.entities.push(pinLayer);
        
    }

    function drawLines(locations) {
        locations.forEach(function (elem, index) {
            var elemLocation = new Microsoft.Maps.Location(elem.Latitude, elem.Longitude);
            locations.forEach(function (elemInner, indexInner) {
                var elemInnerLocation = new Microsoft.Maps.Location(elemInner.Latitude, elemInner.Longitude);
                var lineVertices = new Array(elemLocation, elemInnerLocation);
                var line = new Microsoft.Maps.Polyline(lineVertices);
                line.Title = "Route from \"" + elem.Name + "\" to \"" + elemInner.Name + "\"";
                line.Description = "Distance: " + "2,7 km" + ", Duration: " + "32 min";
                //map.entities.push(line);
                linesLayer.push(line);
                linesLayer.setOptions({ zIndex: 0, visible: true });
                Microsoft.Maps.Events.addHandler(line, "click", displayInfobox);
                Microsoft.Maps.Events.addHandler(line, "mouseover", blueLine);
                Microsoft.Maps.Events.addHandler(line, "mouseout", redLine);
            });

        });
        map.entities.push(linesLayer);
    }

    function searchModuleLoaded() {

    }

    function GetMap() {
        map = new Microsoft.Maps.Map(document.getElementById("mapDiv"), {
            credentials: "AuM7che94B5gbSaSIvcb7kXrr_tW7ZMq81q_rfaZibeZtXakscM4u-WP9OB7K58V",
            center: new Microsoft.Maps.Location(51.110251, 17.036105),
            zoom: 13
        });
        Microsoft.Maps.loadModule("Microsoft.Maps.Directions", { callback: createWalkingRoute });
        Microsoft.Maps.loadModule("Microsoft.Maps.Search", { callback: searchModuleLoaded });
        var infoboxOptions = { visible: false, title: "title", description: "description" };
        pinInfobox = new Microsoft.Maps.Infobox(new Microsoft.Maps.Location(0, 0), infoboxOptions);
        infoboxLayer.push(pinInfobox);
        //map.entities.push(infoboxLayer);
    }

    var linesTurned = true;

    function ViewModel() {
        var that = this;
        this.searchQuery = ko.observable("");
        this.searchHowMany = ko.observable("30");
        this.searchWhere = ko.observable("wrocław");
        this.dataSetName = ko.observable("");
        this.getMap = function () {
            map.entities.clear();
            pinLayer.clear();
            linesLayer.clear();
            pinInfobox.setOptions({ visible: false });
            var query = that.searchQuery();
            var where = that.searchWhere();
            var howMany = that.searchHowMany();
            map.entities.push(infoboxLayer);
            //var searchManager = new Microsoft.Maps.Search.SearchManager(map);
            //searchManager.search({ what: query, where: where, count: 50, callback: geocodeCallback });
            target.append(spinner.el);
            $(".block").css("visibility", "visible");
            $.post("/Home/FindLocations", { query: query, near: where, howMany: howMany }, function (result) {
                locations = result;
                drawLocations(result.locations);
            }).done(function () {
                spinner.spin();
                $(".block").css("visibility", "hidden");

            });
        }
        this.turnLines = function () {
            if (linesTurned) {
                linesLayer.setOptions({ zIndex: 0, visible: false });
                linesTurned = false;
            } else {
                linesLayer.setOptions({ zIndex: 0, visible: true });
                linesTurned = true;
            }
        }
        this.saveLocations = function () {
            target.append(spinner.el);
            $(".block").css("visibility", "visible");
            var where = that.searchWhere();
            var name = that.dataSetName();
            $.post("/Home/SaveDataSet", { locations: JSON.stringify(locations.locations), where: where, dataSetName: name }, function() {
               
            }).done(function (){
                spinner.spin();
                $(".block").css("visibility", "hidden");

            });
        }
    }

    $(document).ready(function () {
        GetMap();
        ko.applyBindings(new ViewModel());

    });
</script>
