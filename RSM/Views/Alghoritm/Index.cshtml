@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>

@model List<RSM.Entities.DataSet>

<div class="row">
    <div class="col-md-2">
        <label>Data set: </label>
    </div>    <div class="col-md-6">
            @(Html.Kendo().DropDownList()
              .BindTo(ViewBag.DataSet)
              .Name("dataSet")
              .DataValueField("Id")
              .DataTextField("Name")
              .HtmlAttributes(new { style = "width:100%;" }))
        </div>
    </div>
<br/>
@(Html.Kendo().TabStrip()
          .Name("alghoritmTabs")
          .Animation(conf => conf.Open(effect => effect.Fade(FadeDirection.In)))
          .Items(tabstrip =>
          {
              tabstrip.Add().Text("Simulated annealing")
                  .Selected(true)
                  .Content(@<text>
                    @*Form for parameters of Simulated Annealing*@
                    <div class="alghoritmTab" row="parameters-sa" data-bind="visible: simmulatedAnnealingChecked">
    <div class="row">
        <div class="col-md-3">
            <label>Temperature</label>
        </div>
        <div class="col-md-3">
            <input data-bind="kendoNumericTextBox: { value: saTemperature, min: 0, max: 10000, step: 100, format: 'i' }" />

        </div>
    </div>
    <div class="row">
        <div class="col-md-3">
            <label>Time constrain</label>
        </div>
        <div class="col-md-3">
            <input data-bind="kendoNumericTextBox: { value: saTimeConstrain, min: 0, max: 100000, step: 1000, format: 'i' }" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-3">
            <label>Number of iterations</label>
        </div>
        <div class="col-md-3">
            <input data-bind="kendoNumericTextBox: { value: saNumberOfIterations, min: 0, max: 100000, step: 1000, format: 'i' }" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-3">
            <label>Temperature change parameter</label>
        </div>
        <div class="col-md-3">
            <input data-bind="kendoNumericTextBox: { value: saTemperatureAlpha, min: 0, max: 1, step: 0.1, format: 'n6', decimals: 6 }" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-3">
            <label>How many times repeated</label>
        </div>
        <div class="col-md-3">
            <input data-bind="kendoNumericTextBox: { value: saHowMany, min: 0, max: 1000, step: 1, format: 'i'}" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-3">
            <button class="btn btn-primary" data-bind="click: addSimulatedAnnealing">Add simulated annealing to run</button>
        </div>
    </div>
    <br />
</div>
                </text>);

              tabstrip.Add().Text("Ant Colony")
                  .Content(@<text>
                    @*Form for parameters of Ant Colony*@
                    <div class="alghoritmTab" row="parameters-sa" data-bind="visible: antChecked">
    <div class="row">
        <div class="col-md-3">
            <label>Time constrain</label>
        </div>
        <div class="col-md-3">
            <input data-bind="kendoNumericTextBox: { value: antTimeConstrain, min: 0, max: 100000, step: 1000, format: 'i' }" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-3">
            <label>Number Of Iterations</label>
        </div>
        <div class="col-md-3">
            <input data-bind="kendoNumericTextBox: { value: antNumberOfIterations, min: 0, max: 10000, step: 100, format: 'i' }" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-3">
            <label>Number Of Ants Per Vertex</label>
        </div>
        <div class="col-md-3">
            <input data-bind="kendoNumericTextBox: { value: antNumberOfAntsPerVertex, min: 0, max: 100, step: 5, format: 'i' }" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-3">
            <label>Evaporation Coefficient</label>
        </div>
        <div class="col-md-3">
            <input data-bind="kendoNumericTextBox: { value: antEvaporationCoefficient, min: 0, max: 1, step: 0.1, format: 'n6', decimals: 6 }" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-3">
            <label>Intensity Derivative</label>
        </div>
        <div class="col-md-3">
            <input data-bind="kendoNumericTextBox: { value: antIntensityDerivative, min: 0, max: 1, step: 0.1, format: 'n6', decimals: 6 }" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-3">
            <label>Initial Pheromon Value</label>
        </div>
        <div class="col-md-3">
            <input data-bind="kendoNumericTextBox: { value: antInitialPheromonValue, min: 0, max: 1, step: 0.00001, format: 'n6', decimals: 6 }" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-3">
            <label>Trail Importance</label>
        </div>
        <div class="col-md-3">
            <input data-bind="kendoNumericTextBox: { value: antTrailImportance, min: 0, max: 1, step: 0.1, format: 'n6', decimals: 6 }" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-3">
            <label>Visibility Importance</label>
        </div>
        <div class="col-md-3">
            <input data-bind="kendoNumericTextBox: { value: antVisibilityImportance, min: 0, max: 1, step: 0.1, format: 'n6', decimals: 6 }" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-3">
            <button class="btn btn-primary" data-bind="click: addAnt">Add ant colony to run</button>
        </div>
    </div>
    <br />
</div>
                </text>);

              tabstrip.Add().Text("Repetead Nearest Neigbour")
                  .Content(@<text>
                   @*Form for parameters of Repeated Nerest Neigbour*@
                <div class="alghoritmTab" row="parameters-sa" data-bind="visible: nearestNeigbourChecked">
    <div class="row">
        <div class="col-md-3">
            <label>Time constrain</label>
        </div>
        <div class="col-md-3">
            <input data-bind="kendoNumericTextBox: { value: nnTimeConstrain, min: 0, max: 100000, step: 1000, format: 'i' }" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-3">
            <button class="btn btn-primary" data-bind="click: addNn">Add NN to run</button>
        </div>
    </div>
    <br />
</div>
                </text>);

              tabstrip.Add().Text("Charts to draw")
                  .Content(@<text>
                               <div class="alghoritmTab">
                                    <div class="row">
                                   <div class="col-md-3">
                                       <input type="checkbox" data-bind="checked: saIterationScoreChecked"/>SA Score - Iteration
                                   </div>
                                   </div>
                                   <div class="row">
                                       <div class="col-md-3">
                                           <input type="checkbox" data-bind="checked: saTemperatureScoreChecked"/>SA Score - Temperature
                                       </div>
                                   </div>
                                   <div class="row">
                                       <div class="col-md-3">
                                           <input type="checkbox" data-bind="checked: saTemperatureAlphaScoreChecked"/>SA Temperature Alpha - Score
                                       </div>
                                   </div>
                                   <div class="row">
                                       <div class="col-md-3">
                                           <input type="checkbox" data-bind="checked: alghoritmSaChecked"/>SA
                                       </div>
                                   </div>
                                   <div class="row">
                                       <div class="col-md-3">
                                           <input type="checkbox" data-bind="checked: alghoritmAntChecked"/>AC
                                       </div>
                                   </div>
                                   <div class="row">
                                       <div class="col-md-3">
                                           <input type="checkbox" data-bind="checked: alghoritmNnChecked"/>NN
                                       </div>
                                   </div>
                                   <div class="row">
                                       <div class="col-md-3">
                                           <input type="checkbox" data-bind="checked: alghoritmCompareChecked"/>All
                                       </div>
                                   </div>
                               </div>
                </text>);
          })
      )
<br/>
<div class="row">
<div class="col-md-3">

    <button class="btn" data-bind="click: runAlghoritms">Run Alghoritms</button>
</div>
</div>





<div class="panel row" id="alghoritmsToRun">
    <div class="panel panel-default">
        <div class="panel-heading">Simmulated annealing:</div>
        <ul class="list-group" data-bind="foreach: simulatedAnnealingToRun">
            <li class="list-group-item">
                Temperature: <span data-bind="text: TemperatureMax"></span>,
                Time constrain: <span data-bind="text: TimeConstrain"></span>,
                Temperature change parameter: <span data-bind="text: TemperatureAlpha"></span>,
                Number of iterations: <span data-bind="text: NumberOfIteration"></span>,
                How many times repeated: <span data-bind="text: HomManyTimes"></span>,
                DataSet: <span data-bind="text: DataSet.Name"></span>
                <div class="row">
                    <div class="col-md-4">
                        <button data-bind="click: $parent.removeSa" class="btn btn-danger btn-sm">Remove</button>
                        <button data-bind="click: $parent.showSa" class="btn btn-info btn-sm">Show on map</button>
                    </div>
                    <div class="col-md-4">
                        Result: <span data-bind="text: Result.Score"></span>
                    </div>
                    </div>
            </li>
        </ul>
    </div>
    <div class="panel panel-default">
        <div class="panel-heading">Ant colony:</div>
        <ul class="list-group" data-bind="foreach: antToRun">
            <li class="list-group-item">
                Time constrain <span data-bind="text: TimeConstrain"></span>
                Number Of Iterations <span data-bind="text: NumberOfIterations"></span>
                Number Of Ants Per Vertex <span data-bind="text: NumberOfAntsPerVertex"></span>
                Evaporation Coefficient <span data-bind="text: EvaporationCoefficient"></span>
                Intensity Derivative <span data-bind="text: IntensityDerivative"></span>
                Initial PheromonValue <span data-bind="text: InitialPheromonValue"></span>
                Trail Importance <span data-bind="text: TrailImportance"></span>
                Visibility Importance <span data-bind="text: VisibilityImportance"></span>
                <button data-bind="click: $parent.removeAnt" class="btn btn-danger">Remove</button>
                <button data-bind="click: $parent.showAnt" class="btn btn-info">Show on map</button>
            </li>
        </ul>
    </div>
    <div class="panel panel-default">
        <div class="panel-heading">NN:</div>
        <ul class="list-group" data-bind="foreach: nnToRun">
            <li class="list-group-item">
                Time constrain <span data-bind="text: TimeConstrain"></span>
                <button data-bind="click: $parent.removeNn" class="btn btn-danger">Remove</button>
                <button data-bind="click: $parent.showNn" class="btn btn-info">Show on map</button>
            </li>
        </ul>
    </div>
</div>




<div class="row">
    <div id="mapDiv" style="height: 800px; position: relative;"></div>
</div>
<script type="text/javascript" src="http://ecn.dev.virtualearth.net/mapcontrol/mapcontrol.ashx?v=7.0&mkt=pl-pl"></script>
<div class="chart" data-bind="visible: saIterationScoreChecked, kendoChart: { data: saIterationScoreData, title: {text: 'Simulated annealing - dependency of score on number of iterations'}, yAxis: {title: {text: 'Score'}}, xAxis: {title: {text: 'Number of iterations'}}, seriesDefaults: { type: 'scatterLine'}, series: [{ xField: 'iterations', yField: 'score' }], tooltip:{visible: true, format: '{0}%', template: 'Score: #=value.y#'} }"></div>
<div class="chart"  data-bind="visible: saTemperatureScoreChecked, kendoChart: { data: saTemperatureScoreData, title: {text: 'Simulated annealing - dependency of score on start temperature'}, yAxis: {title: {text: 'Score'}}, xAxis: {title: {text: 'Temperature starting value'}},seriesDefaults: { type: 'scatterLine'}, series: [{ xField: 'temperature', yField: 'score' }], tooltip:{visible: true, format: '{0}%', template: 'Score: #=value.y#'} }"></div>
<div class="chart"  data-bind="visible: saTemperatureAlphaScoreChecked, kendoChart: { data: saTemperatureAlphaScoreData, title: {text: 'Simulated annealing - dependency of score on parameter of temperature cooling'}, yAxis: {title: {text: 'Score'}}, xAxis: {title: {text: 'Temperature cooling parameter'}},seriesDefaults: { type: 'scatterLine'}, series: [{ xField: 'temperatureAlpha', yField: 'score' }], tooltip:{visible: true, format: '{0}%', template: 'Score: #=value.y#'} }"></div>
<div class="chart" data-bind="visible: alghoritmSaChecked, kendoChart: { data: alghoritmSaData, title: {text: 'Simulated annealing alghoritms'},valueAxis: [{name: 'Score'}], legend: {visible:false}, seriesDefaults: { type: 'bar'}, series: [{ name: 'score', field: 'value' }], tooltip:{visible: true, format: '{0}%', template: 'Score: #=value#'} }"></div>

<div class="chart" data-bind="visible: alghoritmAntChecked, kendoChart: { data: alghoritmAntData, title: {text: 'Ant colony alghoritm'},valueAxis: [{name: 'Score'}], legend: {visible:false}, seriesDefaults: { type: 'bar'}, series: [{ name: 'score', field: 'value' }], tooltip:{visible: true, format: '{0}%', template: 'Score: #=value#'} }"></div>

<div class="chart" data-bind="visible: alghoritmNnChecked, kendoChart: { data: alghoritmNnData, title: {text: 'Repeated nearest neigbour alghoritm'},valueAxis: [{name: 'Score'}], legend: {visible:false}, seriesDefaults: { type: 'bar'}, series: [{ name: 'score', field: 'value' }], tooltip:{visible: true, format: '{0}%', template: 'Score: #=value#'} }"></div>

<div class="chart" data-bind="visible: alghoritmCompareChecked, kendoChart: { data: alghoritmCompareData, title: {text: 'All alghoritms - comparision'},valueAxis: [{name: 'Score'}], legend: {visible:false}, seriesDefaults: { type: 'bar'},categoryAxis: {categories: ['Simulated Annealing','Repeated Nearest Neigbour','Ant Colony']}, series: [{ name: 'score', field: 'value' }], tooltip:{visible: true, format: '{0}%', template: 'Score: #=value#'} }"></div>


<script>

    ////////MAP/////////
    var pinLayer = new Microsoft.Maps.EntityCollection();
    var linesLayer = new Microsoft.Maps.EntityCollection();
    var map = null;

    function GetMap() {
        map = new Microsoft.Maps.Map(document.getElementById("mapDiv"), {
            credentials: "AuM7che94B5gbSaSIvcb7kXrr_tW7ZMq81q_rfaZibeZtXakscM4u-WP9OB7K58V",
            center: new Microsoft.Maps.Location(51.110251, 17.036105),
            zoom: 13
        });
    }

    function drawLocations(locations) {
        map.setView({ center: new Microsoft.Maps.Location(locations[0].Latitude, locations[0].Longitude), zoom: 13 });
        locations.forEach(function (elem, index) {
            var elemLocation = new Microsoft.Maps.Location(elem.Latitude, elem.Longitude);
            var pin = new Microsoft.Maps.Pushpin(elemLocation);
            pin.Title = elem.Name;
            pin.Description = elem.Address + ", Category: " + elem.Category + ", Rate: " + elem.Rate;
            pinLayer.push(pin);
        });
        drawLines(locations);
        map.entities.push(pinLayer);

    }

    function drawLines(locations) {
        locations.forEach(function (elem, index) {
            var elemLocation = new Microsoft.Maps.Location(elem.Latitude, elem.Longitude);
            var elemInner = locations[index + 1];
            if (elemInner) {
                var elemInnerLocation = new Microsoft.Maps.Location(elemInner.Latitude, elemInner.Longitude);
                var lineVertices = new Array(elemLocation, elemInnerLocation);
                var line = new Microsoft.Maps.Polyline(lineVertices);
                linesLayer.push(line);
            }

        });
        map.entities.push(linesLayer);
    }

    var lastResult;
    //////////////////

    function ViewModel() {
        var that = this;
        this.dataSetId = ko.observable(null);

        this.simmulatedAnnealingChecked = ko.observable(true);
        this.antChecked = ko.observable(true);
        this.nearestNeigbourChecked = ko.observable(true);

        this.saIterationScoreChecked = ko.observable(false);
        this.saTemperatureScoreChecked = ko.observable(false);
        this.saTemperatureAlphaScoreChecked = ko.observable(false);
        this.alghoritmSaChecked = ko.observable(false);
        this.alghoritmAntChecked = ko.observable(false);
        this.alghoritmNnChecked = ko.observable(false);
        this.alghoritmCompareChecked = ko.observable(false);



        /////Simulated Annealing parameters
        this.saTemperature = ko.observable("150");
        this.saTimeConstrain = ko.observable("3000");
        this.saNumberOfIterations = ko.observable("50000");
        this.saTemperatureAlpha = ko.observable("0.99");
        this.saHowMany = ko.observable("1");
        this.simulatedAnnealingToRun = ko.observableArray();
        ////

        /////Ant Colony parameters
        this.antTimeConstrain = ko.observable("3000");
        this.antNumberOfIterations = ko.observable("50");
        this.antNumberOfAntsPerVertex = ko.observable("10");
        this.antEvaporationCoefficient = ko.observable("0.9");
        this.antIntensityDerivative = ko.observable("0.5");
        this.antInitialPheromonValue = ko.observable("0.00001");
        this.antTrailImportance = ko.observable("1");
        this.antVisibilityImportance = ko.observable("1");
        this.antToRun = ko.observableArray();
        ////

        /////Nearest neigbour parameters
        this.nnTimeConstrain = ko.observable("3000");
        this.nnToRun = ko.observableArray();
        ////

        this.runAlghoritms = function () {
            var saAlgs = that.simulatedAnnealingToRun();
            var antAlgs = that.antToRun();
            var nnAlgs = that.nnToRun();
            target.append(spinner.el);
            $.post("/Alghoritm/Run", { saTasks: saAlgs, antTasks: antAlgs, nnTasks: nnAlgs }, function (result) {
                lastResult = result;
                that.alghoritmCompareData.removeAll();
                that.saIterationScoreData.removeAll();
                that.saTemperatureScoreData.removeAll();
                that.saTemperatureAlphaScoreData.removeAll();
                that.alghoritmSaData.removeAll();
                that.alghoritmAntData.removeAll();
                that.alghoritmNnData.removeAll();

                $.each(result.SimulatedAnnealingResults, function (index, elem) {
                    that.simulatedAnnealingToRun().filter(function (e) {
                        return e.Id === elem.Id;
                    })[0].Result.Score(elem.ScoreAvarege);
                    
                    that.saIterationScoreData.push({ iterations: elem.Parameters.NumberOfIteration, score: elem.ScoreAvarege });
                    that.saTemperatureScoreData.push({ temperature: elem.Parameters.TemperatureMax, score: elem.ScoreAvarege });
                    that.saTemperatureAlphaScoreData.push({ temperatureAlpha: elem.Parameters.TemperatureAlpha, score: elem.ScoreAvarege });
                    that.alghoritmSaData.push({ name: 'score', value: elem.ScoreAvarege });
                    
                });
                $.each(result.AntColonyResults, function (index, elem) {
                    that.alghoritmAntData.push({ name: 'score', value: elem.Score });
                });
                $.each(result.RepeatedNearestNeighborResults, function (index, elem) {
                    that.alghoritmNnData.push({ name: 'score', value: elem.Score });
                });
                that.alghoritmCompareData.push({ name: 'score', value: result.AverageSaScore });
                that.alghoritmCompareData.push({ name: 'score', value: result.AverageNnScore });
                that.alghoritmCompareData.push({ name: 'score', value: result.AverageAntScore });
                spinner.spin();
            });
        };

        //Create SA tasks
        this.addSimulatedAnnealing = function () {
            var time = that.saTimeConstrain();
            var temp = that.saTemperature();
            var tempAlpha = that.saTemperatureAlpha();
            var iterations = that.saNumberOfIterations();
            var howMany = that.saHowMany();
            var dataSet = $("#dataSet").data("kendoDropDownList").dataItem();
            that.simulatedAnnealingToRun.push({ Result: {Score: ko.observable(0)}, Id: that.simulatedAnnealingToRun().length, HomManyTimes: howMany, TimeConstrain: time, TemperatureMax: temp, TemperatureAlpha: tempAlpha, NumberOfIteration: iterations, DataSet: { Name: dataSet.Name, Id: dataSet.Id } });
        };

        this.removeSa = function(elem) {
            that.simulatedAnnealingToRun.remove(elem);
        };

        this.showSa = function(elem) {
            var found = lastResult.SimulatedAnnealingResults.filter(function (e) {
                return e.Id === elem.Id;
            })[0];

            if (found) {
                map.entities.clear();
                pinLayer.clear();
                linesLayer.clear();
                drawLocations(found.Paths[0]);
            }
        }

        //Create NN tasks
        this.addNn = function() {
            var time = that.nnTimeConstrain();
            var dataSet = $("#dataSet").data("kendoDropDownList").dataItem();
            that.nnToRun.push({ Id: that.nnToRun().length, TimeConstrain: time, DataSet: { Name: dataSet.Name, Id: dataSet.Id } });
        };

        this.removeNn = function (elem) {
            that.nnToRun.remove(elem);
        };

        this.showNn = function (elem) {
            var found = lastResult.RepeatedNearestNeighborResults.filter(function (e) {
                return e.Id === elem.Id;
            })[0];

            if (found) {
                map.entities.clear();
                pinLayer.clear();
                linesLayer.clear();
                drawLocations(found.Path);
            }
        }

        //Create Ant tasks
        this.addAnt = function () {
            var time = that.antTimeConstrain();
            var noi = that.antNumberOfIterations();
            var noapv = that.antNumberOfAntsPerVertex();
            var ec = that.antEvaporationCoefficient();
            var ide = that.antIntensityDerivative();
            var ipv = that.antInitialPheromonValue();
            var ti = that.antTrailImportance();
            var vi = that.antVisibilityImportance();
            var dataSet = $("#dataSet").data("kendoDropDownList").dataItem();
            that.antToRun.push({ Id: that.antToRun().length, TimeConstrain: time, NumberOfIterations: noi, NumberOfAntsPerVertex: noapv, EvaporationCoefficient: ec, IntensityDerivative: ide, InitialPheromonValue: ipv, TrailImportance: ti, VisibilityImportance: vi, DataSet: { Name: dataSet.Name, Id: dataSet.Id } });
        };

        this.removeAnt = function (elem) {
            that.antToRun.remove(elem);
        };

        this.showAnt = function (elem) {
            var found = lastResult.AntColonyResults.filter(function (e) {
                return e.Id === elem.Id;
            })[0];

            if (found) {
                map.entities.clear();
                pinLayer.clear();
                linesLayer.clear();
                drawLocations(found.Path);
            }
        }

        this.saIterationScoreData = ko.observableArray();
        this.saTemperatureScoreData = ko.observableArray();
        this.saTemperatureAlphaScoreData = ko.observableArray();
        this.alghoritmCompareData = ko.observableArray();
        this.alghoritmSaData = ko.observableArray();
        this.alghoritmAntData = ko.observableArray();
        this.alghoritmNnData = ko.observableArray();
    }

    var model;
    $(document).ready(function () {
        model = new ViewModel();
        ko.applyBindings(model);
        GetMap();
    });
</script>
