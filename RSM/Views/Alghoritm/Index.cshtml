@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>

@model List<RSM.Entities.DataSet>

<div class="row">
    <div class="col-md-6">
        @(Html.Kendo().DropDownList()
              .BindTo(ViewBag.DataSet)
              .Name("dataSet")
              .DataValueField("Id")
              .DataTextField("Name")
              .HtmlAttributes(new {style = "width:100%;"}))
    </div>
</div>
<div class="row">
    <div class="col-md-3">
        <input type="checkbox" data-bind="checked: simmulatedAnnealingChecked" />Simmulated annealing
    </div>
    <div class="col-md-3">

        <input type="checkbox" data-bind="checked: antChecked" />Ant alghoritm
    </div>

    <div class="col-md-3">

        <input type="checkbox" data-bind="checked: nearestNeigbourChecked" />NN
    </div>

    <div class="col-md-3">

        <button class="btn" data-bind="click: runAlghoritms">Run Alghoritms</button>
    </div>
</div>


@*Form for parameters of Simulated Annealing*@
<div row="parameters-sa" data-bind="visible: simmulatedAnnealingChecked">
    <h4>Parameters</h4>
    <div class="row">
        <div class="col-md-3">
            <label>Temperature</label>
        </div>
        <div class="col-md-3">
            <input data-bind="kendoNumericTextBox: { value: saTemperature, min: 0, max: 10000, step: 100, format: 'i' }" />

        </div>
    </div>
    <div class="row">
        <div class="col-md-3">
            <label>Time constrain</label>
        </div>
        <div class="col-md-3">
            <input data-bind="kendoNumericTextBox: { value: saTimeConstrain, min: 0, max: 100000, step: 1000, format: 'i' }" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-3">
            <label>Number of iterations</label>
        </div>
        <div class="col-md-3">
            <input data-bind="kendoNumericTextBox: { value: saNumberOfIterations, min: 0, max: 100000, step: 1000, format: 'i' }" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-3">
            <label>Temperature change parameter</label>
        </div>
        <div class="col-md-3">
            <input data-bind="kendoNumericTextBox: { value: saTemperatureAlpha, min: 0, max: 1, step: 0.1, format: 'n6', decimals: 6 }"/>
        </div>
    </div>
    <div class="row">
        <div class="col-md-3">
            <label>How many times repeated</label>
        </div>
        <div class="col-md-3">
            <input data-bind="kendoNumericTextBox: { value: saHowMany, min: 0, max: 1000, step: 1, format: 'i'}" />
        </div>
    </div>
    <div class="row">
        <button class="btn btn-primary" data-bind="click: addSimulatedAnnealing">Add simulated annealing to run</button>
    </div>
</div>

@*Form for parameters of Ant Colony*@
<div row="parameters-sa" data-bind="visible: antChecked">
    <div class="row">
        <div class="col-md-3">
            <label>Time constrain</label>
        </div>
        <div class="col-md-3">
            <input data-bind="kendoNumericTextBox: { value: antTimeConstrain, min: 0, max: 100000, step: 1000, format: 'i' }" />
        </div>
        </div>
        <div class="row">
            <button class="btn btn-primary" data-bind="click: addAnt">Add ant colony to run</button>
        </div>
</div>

@*Form for parameters of Repeated Nerest Neigbour*@
<div row="parameters-sa" data-bind="visible: nearestNeigbourChecked">
    <div class="row">
        <div class="col-md-3">
            <label>Time constrain</label>
        </div>
        <div class="col-md-3">
            <input data-bind="kendoNumericTextBox: { value: nnTimeConstrain, min: 0, max: 100000, step: 1000, format: 'i' }" />
        </div>
        </div>
        <div class="row">
            <button class="btn btn-primary" data-bind="click: addNn">Add NN to run</button>
        </div>
</div>


<div class="row" id="alghoritmsToRun">
    <div class="panel panel-default">
        <div class="panel-heading">Simmulated annealing:</div>
        <ul class="list-group" data-bind="foreach: simulatedAnnealingToRun">
            <li class="list-group-item">
                Temperature: <span data-bind="text: TemperatureMax"></span>,
                Time constrain <span data-bind="text: TimeConstrain"></span>,
                Temperature change parameter <span data-bind="text: TemperatureAlpha"></span>,
                Number of iterations <span data-bind="text: NumberOfIteration"></span>,
                How many times repeated <span data-bind="text: HomManyTimes"></span>,
                DataSet <span data-bind="text: DataSet.Name"></span>
                <button data-bind="click: $parent.removeSa" class="btn btn-danger">Remove</button>
                <button data-bind="click: $parent.showSa" class="btn btn-info">Show on map</button>
            </li>
        </ul>
    </div>
    <div class="panel panel-default">
        <div class="panel-heading">Ant colony:</div>
        <ul class="list-group" data-bind="foreach: antToRun">
            <li class="list-group-item">
                Time constrain <span data-bind="text: TimeConstrain"></span>
                <button data-bind="click: $parent.removeAnt" class="btn btn-danger">Remove</button>
                <button data-bind="click: $parent.showAnt" class="btn btn-info">Show on map</button>
            </li>
        </ul>
    </div>
    <div class="panel panel-default">
        <div class="panel-heading">NN:</div>
        <ul class="list-group" data-bind="foreach: nnToRun">
            <li class="list-group-item">
                Time constrain <span data-bind="text: TimeConstrain"></span>
                <button data-bind="click: $parent.removeNn" class="btn btn-danger">Remove</button>
                <button data-bind="click: $parent.showNn" class="btn btn-info">Show on map</button>
            </li>
        </ul>
    </div>
</div>




<div class="row">
    <div id="mapDiv" style="height: 800px; position: relative;"></div>
</div>
<script type="text/javascript" src="http://ecn.dev.virtualearth.net/mapcontrol/mapcontrol.ashx?v=7.0&mkt=pl-pl"></script>
<div data-bind="kendoChart: { data: saIterationScoreData, title: {text: 'Simulated annealing - dependency of score on number of iterations'}, yAxis: {title: {text: 'Score'}}, xAxis: {title: {text: 'Number of iterations'}}, seriesDefaults: { type: 'scatterLine'}, series: [{ xField: 'iterations', yField: 'score' }], tooltip:{visible: true, format: '{0}%', template: 'Score: #=value.y#'} }"></div>
<div data-bind="kendoChart: { data: saTemperatureScoreData, title: {text: 'Simulated annealing - dependency of score on start temperature'}, yAxis: {title: {text: 'Score'}}, xAxis: {title: {text: 'Temperature starting value'}},seriesDefaults: { type: 'scatterLine'}, series: [{ xField: 'temperature', yField: 'score' }], tooltip:{visible: true, format: '{0}%', template: 'Score: #=value.y#'} }"></div>
<div data-bind="kendoChart: { data: saTemperatureAlphaScoreData, title: {text: 'Simulated annealing - dependency of score on parameter of temperature cooling'}, yAxis: {title: {text: 'Score'}}, xAxis: {title: {text: 'Temperature cooling parameter'}},seriesDefaults: { type: 'scatterLine'}, series: [{ xField: 'temperatureAlpha', yField: 'score' }], tooltip:{visible: true, format: '{0}%', template: 'Score: #=value.y#'} }"></div>
<div data-bind="kendoChart: { data: alghoritmCompareData, title: {text: 'All alghoritms - comparision'},valueAxis: [{name: 'Score'}], legend: {visible:false}, seriesDefaults: { type: 'bar'},categoryAxis: {categories: ['Simulated Annealing','Repeated Nearest Neigbour','Ant Colony']}, series: [{ name: 'score', field: 'value' }], tooltip:{visible: true, format: '{0}%', template: 'Score: #=value#'} }"></div>
<script>

    ////////MAP/////////
    var pinLayer = new Microsoft.Maps.EntityCollection();
    var linesLayer = new Microsoft.Maps.EntityCollection();
    var map = null;

    function GetMap() {
        map = new Microsoft.Maps.Map(document.getElementById("mapDiv"), {
            credentials: "AuM7che94B5gbSaSIvcb7kXrr_tW7ZMq81q_rfaZibeZtXakscM4u-WP9OB7K58V",
            center: new Microsoft.Maps.Location(51.110251, 17.036105),
            zoom: 13
        });
    }

    function drawLocations(locations) {
        map.setView({ center: new Microsoft.Maps.Location(locations[0].Latitude, locations[0].Longitude), zoom: 13 });
        locations.forEach(function (elem, index) {
            var elemLocation = new Microsoft.Maps.Location(elem.Latitude, elem.Longitude);
            var pin = new Microsoft.Maps.Pushpin(elemLocation);
            pin.Title = elem.Name;
            pin.Description = elem.Address + ", Category: " + elem.Category + ", Rate: " + elem.Rate;
            pinLayer.push(pin);
        });
        drawLines(locations);
        map.entities.push(pinLayer);

    }

    function drawLines(locations) {
        locations.forEach(function (elem, index) {
            var elemLocation = new Microsoft.Maps.Location(elem.Latitude, elem.Longitude);
            var elemInner = locations[index + 1];
            if (elemInner) {
                var elemInnerLocation = new Microsoft.Maps.Location(elemInner.Latitude, elemInner.Longitude);
                var lineVertices = new Array(elemLocation, elemInnerLocation);
                var line = new Microsoft.Maps.Polyline(lineVertices);
                linesLayer.push(line);
            }

        });
        map.entities.push(linesLayer);
    }

    var lastResult;
    //////////////////

    function ViewModel() {
        var that = this;
        this.dataSetId = ko.observable(null);

        this.simmulatedAnnealingChecked = ko.observable(false);
        this.antChecked = ko.observable(false);
        this.nearestNeigbourChecked = ko.observable(false);

        /////Simulated Annealing parameters
        this.saTemperature = ko.observable("");
        this.saTimeConstrain = ko.observable("");
        this.saNumberOfIterations = ko.observable("");
        this.saTemperatureAlpha = ko.observable("");
        this.saHowMany = ko.observable("");
        this.simulatedAnnealingToRun = ko.observableArray();
        ////

        /////Ant Colony parameters
        this.antTimeConstrain = ko.observable("");
        this.antToRun = ko.observableArray();
        ////

        /////Nearest neigbour parameters
        this.nnTimeConstrain = ko.observable("");
        this.nnToRun = ko.observableArray();
        ////

        this.runAlghoritms = function () {
            var saAlgs = that.simulatedAnnealingToRun();
            var antAlgs = that.antToRun();
            var nnAlgs = that.nnToRun();

            $.post("/Alghoritm/Run", { saTasks: saAlgs, antTasks: antAlgs, nnTasks: nnAlgs }, function (result) {
                lastResult = result;
                that.alghoritmCompareData.removeAll();
                that.saIterationScoreData.removeAll();
                that.saTemperatureScoreData.removeAll();
                that.saTemperatureAlphaScoreData.removeAll();
                $.each(result.SimulatedAnnealingResults, function (index, elem) {
                    that.saIterationScoreData.push({ iterations: elem.Parameters.NumberOfIteration, score: elem.ScoreAvarege });
                    that.saTemperatureScoreData.push({ temperature: elem.Parameters.TemperatureMax, score: elem.ScoreAvarege });
                    that.saTemperatureAlphaScoreData.push({ temperatureAlpha: elem.Parameters.TemperatureAlpha, score: elem.ScoreAvarege });
                    
                });
                that.alghoritmCompareData.push({ name: 'score', value: result.AverageSaScore });
                that.alghoritmCompareData.push({ name: 'score', value: result.AverageNnScore });
                that.alghoritmCompareData.push({ name: 'score', value: result.AverageAntScore });
            });
        };

        //Create SA tasks
        this.addSimulatedAnnealing = function () {
            var time = that.saTimeConstrain();
            var temp = that.saTemperature();
            var tempAlpha = that.saTemperatureAlpha();
            var iterations = that.saNumberOfIterations();
            var howMany = that.saHowMany();
            var dataSet = $("#dataSet").data("kendoDropDownList").dataItem();
            debugger;
            that.simulatedAnnealingToRun.push({ Id: that.simulatedAnnealingToRun().length, HomManyTimes: howMany, TimeConstrain: time, TemperatureMax: temp, TemperatureAlpha: tempAlpha, NumberOfIteration: iterations, DataSet: { Name: dataSet.Name, Id: dataSet.Id } });
        };

        this.removeSa = function(elem) {
            that.simulatedAnnealingToRun.remove(elem);
        };

        this.showSa = function(elem) {
            var found = lastResult.SimulatedAnnealingResults.filter(function (e) {
                return e.Id === elem.Id;
            })[0];

            if (found) {
                map.entities.clear();
                pinLayer.clear();
                linesLayer.clear();
                drawLocations(found.Paths[0]);
            }
        }

        //Create NN tasks
        this.addNn = function() {
            var time = that.nnTimeConstrain();
            var dataSet = $("#dataSet").data("kendoDropDownList").dataItem();
            that.nnToRun.push({ Id: that.nnToRun().length, TimeConstrain: time, DataSet: { Name: dataSet.Name, Id: dataSet.Id } });
        };

        this.removeNn = function (elem) {
            that.nnToRun.remove(elem);
        };

        this.showNa = function (elem) {
            var found = lastResult.RepeatedNearestNeighborResults.filter(function (e) {
                return e.Id === elem.Id;
            })[0];

            if (found) {
                map.entities.clear();
                pinLayer.clear();
                linesLayer.clear();
                drawLocations(found.Path);
            }
        }

        //Create Ant tasks
        this.addAnt = function () {
            var time = that.antTimeConstrain();
            var dataSet = $("#dataSet").data("kendoDropDownList").dataItem();
            that.antToRun.push({ Id: that.antToRun().length, TimeConstrain: time, DataSet: { Name: dataSet.Name, Id: dataSet.Id } });
        };

        this.removeAnt = function (elem) {
            that.antToRun.remove(elem);
        };

        this.showAnt = function (elem) {
            var found = lastResult.AntColonyResults.filter(function (e) {
                return e.Id === elem.Id;
            })[0];

            if (found) {
                map.entities.clear();
                pinLayer.clear();
                linesLayer.clear();
                drawLocations(found.Path);
            }
        }

        this.saIterationScoreData = ko.observableArray();
        this.saTemperatureScoreData = ko.observableArray();
        this.saTemperatureAlphaScoreData = ko.observableArray();
        this.alghoritmCompareData = ko.observableArray();
    }

    var model;
    $(document).ready(function () {
        model = new ViewModel();
        ko.applyBindings(model);
        GetMap();
    });
</script>
